namespace Festify.Model;

fact Individual {
key:
    unique;

query:
	Attendee* attendees {
		IndividualAttendee ia : ia.individual = this
		Attendee a : a = ia.attendee
	}

    EnableToastNotification* isToastNotificationEnabled {
        EnableToastNotification d : d.individual = this
            where not d.isDisabled
    }
}

fact EnableToastNotification {
key:
    unique;
    Individual individual;

query:
    bool isDisabled {
        exists DisableToastNotification e : e.enable = this
    }
}

fact DisableToastNotification {
key:
    EnableToastNotification* enable;
}

fact Conference {
key:
	string id;

mutable:
    publish string name;
	publish string mapUrl;

query:
	Day* days {
		Day d : d.conference = this
			where d.hasTimes
	}

	Track* allTracks {
		Track t : t.conference = this
	}

	Track* tracks {
		Track t : t.conference = this
			where t.hasSessions
	}

	Session* sessions {
		Session s : s.conference = this
			where not s.isDeleted
	}

	Session* unscheduledSessions {
		Session s : s.conference = this
			where not s.isDeleted
			and not s.isScheduled
	}

	Speaker* speakers {
		Speaker s : s.conference = this
	}

	ConferenceNotice* notices {
		ConferenceNotice n : n.conference = this
	}

	Room* rooms {
		Room r : r.conference = this
	}
}

fact Attendee {
key:
    string identifier;
    Conference conference;
}

fact IndividualAttendee {
key:
	publish Individual individual;
	Attendee attendee;
}

fact Day {
key:
	publish Conference conference;
	date conferenceDate;

query:
	Time* times {
		Time t : t.day = this
			where not t.isDeleted
	}

	bool hasTimes {
		exists Time t : t.day = this
			where not t.isDeleted
	}
}

fact Time {
key:
    Day day;
    time start;

query:
	SessionPlace* availableSessions {
		SessionPlace sp : sp.place.placeTime = this
			where sp.isCurrent
			and not sp.isDeleted
	}

	TimeDelete* deletes {
		TimeDelete d : d.deleted = this
			where not d.isUndeleted
	}

	bool isDeleted {
		exists TimeDelete d : d.deleted = this
			where not d.isUndeleted
	}
}

fact TimeDelete {
key:
	unique;
	Time deleted;

query:
	bool isUndeleted {
		exists TimeUndelete u : u.undeleted = this
	}
}

fact TimeUndelete {
key:
	TimeDelete undeleted;
}

fact Room {
key:
	unique;
    publish Conference conference;

mutable:
    string roomNumber;
}

fact Track {
key:
    publish Conference conference;
    string name;

query:
	SessionPlace* currentSessionPlaces {
		Session s : s.track = this
			where not s.isDeleted
		SessionPlace sp : sp.session = s
			where sp.isCurrent
			  and not sp.timeIsDeleted
	}

	bool hasSessions {
		exists Session s : s.track = this
			where not s.isDeleted
	}
}

fact Speaker {
key:
    unique;
    publish Conference conference;

mutable:
    string name;
    string imageUrl;
    string contact;
    DocumentSegment* bio;

query:
	Session* sessions {
		Session s : s.speaker = this
			where not s.isDeleted
  }

	SessionPlace* availableSessions {
		Session s : s.speaker = this
			where not s.isDeleted
		SessionPlace sp : sp.session = s
			where sp.isCurrent
			  and not sp.timeIsDeleted
	}
}

fact ConferenceNotice {
key:
	publish Conference conference;
	time timeSent;
	string text;
}

fact Place {
key:
    Time placeTime;
    Room room;

query:
	SessionPlace* currentSessionPlaces {
		SessionPlace sp : sp.place = this
			where sp.isCurrent
			  and not sp.isDeleted
	}
}

fact Level {
key:
	string name;
}

fact Session {
key:
    unique;
    publish Conference conference;
    Speaker speaker;
    Track? track;

mutable:
    string name;
	DocumentSegment* description;
	Level level;

  string dtfSessionId;

query:
	SessionPlace* currentSessionPlaces {
		SessionPlace sp : sp.session = this
			where sp.isCurrent
	}

	SessionNotice* notices {
		SessionNotice n : n.session = this
	}

	bool isDeleted {
		exists SessionDelete d : d.deleted = this
			where not d.isUndeleted
	}

	SessionDelete* sessionDeletes {
		SessionDelete d : d.deleted = this
			where not d.isUndeleted
	}

	bool isScheduled {
		exists SessionPlace sp : sp.session = this
	}
}

fact SessionDelete {
key:
	unique;
	Session deleted;

query:
	bool isUndeleted {
		exists SessionUndelete u : u.undeleted = this
	}
}

fact SessionUndelete {
key:
	SessionDelete undeleted;
}

fact SessionNotice {
key:
	publish Session session;
	time timeSent;
	string text;
}

fact SessionPlace {
key:
    Session session;
    Place place;
    SessionPlace* prior;

query:
	bool isCurrent {
		not exists SessionPlace next : next.prior = this
	}

	bool isDeleted {
		exists SessionDelete d : d.deleted = this.session
			where not d.isUndeleted
	}

	bool timeIsDeleted {
		exists TimeDelete d : d.deleted = this.place.placeTime
	}
}

fact DocumentSegment {
key:
	string text;
}
